Students:
1. Tiannan Zhou (zhou0745)
2. Xuan Bi (bixxx078)

Brief Summary:
	- We added a variable called time_stamp in the struct named BufferDesc to track the "time" when the buffer reads storage and a static variable called times_of_IO to count the times of reading. We increment the counter when a buffer completes its reading procedures and then assign the number of counter to the time_stamp of current buffer. Meanwhile, in the function 'StrategyGetBuffer', we compare all qualified candidate buffers' time_stamps, determine the newest one and then return it to the reading procedures. In this way, We are finding the newest buffer to be replaced while reading new data into buffers, which realizes Last-In-First-Out indeed.

Detailed Changes:
1. buf_internals.h: postgresql-9.2.1/src/include/storage/buf_internals.h
	- We added a member-variable called time_stamp in the struct named BufferDesc. This attribute of a buffer would record the "time" when a buffer reads storage time.

2. buf_init.c: postgresql-9.2.1/src/backend/storage/buffer/buf_init.c
	- We added the initialization code for time_stamp in this file.

3. freelist.c: postgresql-9.2.1/src/backend/storage/buffer/freelist.c
	- We added the comparison code for the time_stamps of all qualified buffers which are not in used to find out the buffer which is the last one pushed into the buffer pool. Then the newest buffer would be returned as a qualified candidate buffer which could be replaced by new reading data.

4. bufmgr.c: postgresql-9.2.1/src/backend/storage/buffer/bufmgr.c
	- We increment the counter for reading whenever the program makes a successful reading and then assign the current counter number to the time_stamp of the buffer which received the new reading in data. Note, all time_stamps of buffers would be reseted and sequentialized when the counter is bigger than a given secure boundary to prevent upper overflow.
